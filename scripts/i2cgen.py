BUSES = {
    0x02000001 : 'I2c1',
    0x02000002 : 'I2c2',
    0x02000003 : 'I2c3',
    0x02000004 : 'I2c4',
    0x02000005 : 'I2c5',
}
max_bus_len = max([len(x) for x in BUSES.values()])

SPEED_MODES = {
     100000 : 'SpeedMode_Standard',
     400000 : 'SpeedMode_Fast',
    1000000 : 'SpeedMode_FastPlus',
    3400000 : 'SpeedMode_HighSpeed',
}
max_sm_len = max([len(x) for x in SPEED_MODES.values()])

DEVICES = {
  0x350000C9 : 'ClassicController',
  0x35000033 : 'Ftm3bd56',
  0x3E000001 : 'Tmp451',
  0x3E000001 : 'Nct72',
  0x33000001 : 'Alc5639',
  0x3B000001 : 'Max77620Rtc',
  0x3A000001 : 'Max77620Pmic',
  0x3A000003 : 'Max77621Cpu',
  0x3A000004 : 'Max77621Gpu',
  0x39000001 : 'Bq24193',
  0x39000033 : 'Max17050',
  0x040000C9 : 'Bm92t30mwv',
  0x3F000401 : 'Ina226Vdd15v0Hb',

  0x3F000001 : 'Ina226VsysCpuDs',
# 0x3F000001 : 'Ina226VddCpuAp',

  0x3F000002 : 'Ina226VsysGpuDs',
# 0x3F000002 : 'Ina226VddGpuAp',

  0x3F000003 : 'Ina226VsysDdrDs',
# 0x3F000003 : 'Ina226VddDdr1V1Pmic',

  0x3F000402 : 'Ina226VsysAp',
  0x3F000403 : 'Ina226VsysBlDs',
  0x35000047 : 'Bh1730',

  0x3F000404 : 'Ina226VsysCore',
# 0x3F000404 : 'Ina226VddCoreAp',

  0x3F000405 : 'Ina226Soc1V8',
# 0x3F000405 : 'Ina226VddSoc1V8',

  0x3F000406 : 'Ina226Lpddr1V8',
# 0x3F000406 : 'Ina226Vdd1V8',

  0x3F000407 : 'Ina226Reg1V32',
  0x3F000408 : 'Ina226Vdd3V3Sys',
  0x34000001 : 'HdmiDdc',
  0x34000002 : 'HdmiScdc',
  0x34000003 : 'HdmiHdcp',
  0x3A000005 : 'Fan53528',
  0x3A000002 : 'Max77812_3',
  0x3A000006 : 'Max77812_2',
  0x3F000409 : 'Ina226VddDdr0V6',
  0x36000001 : 'HoagNfcIc',
  0x3A000007 : 'PmicUnknownAula_4_18'
}

max_dv_len = max([len(x) for x in DEVICES.values()])

ADDRESS = 0x71000BED38

COPYRIGHT_HEADER = '''/*
 * Copyright (c) Atmosph√®re-NX
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by i2cgen.py, do not edit manually. */
'''

r32 = lambda x, y: ida_bytes.get_32bit(x + y)
r64 = lambda x, y: ida_bytes.get_64bit(x + y)

PARSED_BUSES = []

for i in xrange(len(BUSES.keys())):
    entry = ADDRESS + 0x28 * i
    dc, ra, rs, sm, nt, dv, ndv = r32(entry, 0), r32(entry, 4), r32(entry, 8), r32(entry, 12), r32(entry, 16), r64(entry, 24), r32(entry, 32)
    assert dc in BUSES.keys()
    assert 0x70000000 <= ra <= 0x70010000
    assert rs == 0x100
    assert sm in SPEED_MODES.keys()
    assert nt <= 0x80
    assert ndv <= 32

    devices = []
    for j in xrange(ndv):
        dv_e = dv + 0x8 * j
        dv_dc, dv_ar = r32(dv_e, 0), r32(dv_e, 4)
        assert dv_dc in DEVICES.keys()
        assert dv_ar < 0x80
        devices.append((dv_dc, dv_ar))
    PARSED_BUSES.append((dc, ra, rs, sm, nt, devices))

with open('i2c_bus_device_map.inc', 'w') as f:
    print >> f, COPYRIGHT_HEADER
    for (device_code, addr, size, speed_mode, interrupt_id, devices) in PARSED_BUSES:
        print >> f, 'constexpr inline const I2cDeviceDefinition %sDeviceList[] = {' % BUSES[device_code]
        for (dv_device_code, dv_addr) in devices:
            print >> f, ('    { DeviceCode_%%-%ds 0x%%02X },' % (max_dv_len+1)) % (DEVICES[dv_device_code]+',', dv_addr)
        print >> f, '};'
        print >> f, ''
    print >> f, 'constexpr inline const I2cBusDefinition I2cBusList[] = {'
    for (device_code, addr, size, speed_mode, interrupt_id, devices) in PARSED_BUSES:
        fmt = ('    { DeviceCode_%%-%ds 0x%%08X, 0x%%X, %%-%ds %%3d, %%-%dsDeviceList, util::size(%%-%dsDeviceList) },' % (max_bus_len+1, max_sm_len+1, max_bus_len, max_bus_len))
        print >> f, fmt % (BUSES[device_code]+',', addr, size, SPEED_MODES[speed_mode]+',', interrupt_id + 32, BUSES[device_code], BUSES[device_code])
    print >> f, '};'
