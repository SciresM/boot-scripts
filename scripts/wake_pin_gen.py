TYPES = ['Icosa', 'Copper', 'Hoag', 'Iowa', 'Calcio', 'Aula']

EVENTS = {
    0x00 : 'WakeEvent_PexWakeN,           ',
    0x01 : 'WakeEvent_GpioPortA6,         ',
    0x02 : 'WakeEvent_QspiCsN,            ',
    0x03 : 'WakeEvent_Spi2Mosi,           ',
    0x04 : 'WakeEvent_ExtconDetS,         ',
    0x05 : 'WakeEvent_McuIrq,             ',
    0x06 : 'WakeEvent_Uart2Cts,           ',
    0x07 : 'WakeEvent_Uart3Cts,           ',
    0x08 : 'WakeEvent_WifiWakeAp,         ',
    0x09 : 'WakeEvent_AoTag2Pmc,          ',
    0x0A : 'WakeEvent_ExtconDetU,         ',
    0x0B : 'WakeEvent_NfcInt,             ',
    0x0C : 'WakeEvent_Gen1I2cSda,         ',
    0x0D : 'WakeEvent_Gen2I2cSda,         ',
    0x0E : 'WakeEvent_CradleIrq,          ',
    0x0F : 'WakeEvent_GpioPortK6,         ',
    0x10 : 'WakeEvent_RtcIrq,             ',
    0x11 : 'WakeEvent_Sdmmc1Dat1,         ',
    0x12 : 'WakeEvent_Sdmmc2Dat1,         ',
    0x13 : 'WakeEvent_HdmiCec,            ',
    0x14 : 'WakeEvent_Gen3I2cSda,         ',
    0x15 : 'WakeEvent_GpioPortL1,         ',
    0x16 : 'WakeEvent_Clk_32kOut,         ',
    0x17 : 'WakeEvent_PwrI2cSda,          ',
    0x18 : 'WakeEvent_ButtonPowerOn,      ',
    0x19 : 'WakeEvent_ButtonVolUp,        ',
    0x1A : 'WakeEvent_ButtonVolDown,      ',
    0x1B : 'WakeEvent_ButtonSlideSw,      ',
    0x1C : 'WakeEvent_ButtonHome,         ',

    0x20 : 'WakeEvent_AlsProxInt,         ',
    0x21 : 'WakeEvent_TempAlert,          ',
    0x22 : 'WakeEvent_Bq24190Irq,         ',
    0x23 : 'WakeEvent_SdCd,               ',
    0x24 : 'WakeEvent_GpioPortZ2,         ',

    0x27 : 'WakeEvent_Utmip0,             ',
    0x28 : 'WakeEvent_Utmip1,             ',
    0x29 : 'WakeEvent_Utmip2,             ',
    0x2A : 'WakeEvent_Utmip3,             ',
    0x2B : 'WakeEvent_Uhsic,              ',
    0x2C : 'WakeEvent_Wake2PmcXusbSystem, ',
    0x2D : 'WakeEvent_Sdmmc3Dat1,         ',
    0x2E : 'WakeEvent_Sdmmc4Dat1,         ',
    0x2F : 'WakeEvent_CamI2cScl,          ',
    0x30 : 'WakeEvent_CamI2cSda,          ',
    0x31 : 'WakeEvent_GpioPortZ5,         ',
    0x32 : 'WakeEvent_DpHpd0,             ',
    0x33 : 'WakeEvent_PwrIntN,            ',
    0x34 : 'WakeEvent_BtWakeAp,           ',
    0x35 : 'WakeEvent_HdmiIntDpHpd,       ',
    0x36 : 'WakeEvent_UsbVbusEn0,         ',
    0x37 : 'WakeEvent_UsbVbusEn1,         ',
    0x38 : 'WakeEvent_LcdRst,             ',
    0x39 : 'WakeEvent_LcdGpio1,           ',
    0x3A : 'WakeEvent_LcdGpio2,           ',
    0x3B : 'WakeEvent_Uart4Cts,           ',
    0x3D : 'WakeEvent_ModemWakeAp,        ',
    0x3E : 'WakeEvent_TouchInt,           ',
    0x3F : 'WakeEvent_MotionInt,          ',
}

LEVELS = [ 'WakeEventLevel_Low ', 'WakeEventLevel_High', 'WakeEventLevel_Auto' ]

COUNTS = [49, 49, 50, 49, 49, 50]

ADDRESS = 0x71000BB440

COPYRIGHT_HEADER = '''/*
 * Copyright (c) Atmosph√®re-NX
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by wake_pin_gen.py, do not edit manually. */
'''

for i,t in enumerate(TYPES):
    list_addr = ida_bytes.get_64bit(ADDRESS + 8 * i)
    events = []
    yes    = [-1] * 0x40
    for n in xrange(COUNTS[i]):
        entry = list_addr + 12 * n
        x, y, z = ida_bytes.get_32bit(entry), ida_bytes.get_32bit(entry + 4), ida_bytes.get_32bit(entry + 8)
        assert x in EVENTS.keys()
        assert y in [0, 1]
        assert z in [0, 1, 2]
        events.append((EVENTS[x], ['false, ', 'true,  '][y], LEVELS[z]))
        assert yes[x] == -1
        yes[x] = len(events) - 1
    if i == 1:
        continue
    with open('gpio_initial_wake_pin_config_%s.inc' % t.lower(), 'w') as f:
        print >> f, COPYRIGHT_HEADER
        print >> f, 'constexpr inline const WakePinConfig InitialWakePinConfigs%s[] = {' % t
        for event in sorted(EVENTS.keys()):
            if yes[event] != -1:
                print >> f, '    { ams::wec::%s%sams::wec::%s },' % events[yes[event]]
            else:
                print >> f, ' /* { ams::wec::%s                                     }, */' % EVENTS[event]
        print >> f, '};'
        print >> f, ''
        print >> f, 'constexpr inline size_t NumInitialWakePinConfigs%s = util::size(InitialWakePinConfigs%s);' % (t, t)

