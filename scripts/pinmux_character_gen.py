ADDRESS = 0x71000B98B0
COUNT   = 175

DRV_ADDRESS = 0x71000BA918
DRV_COUNT   = 148

COPYRIGHT_HEADER = '''/*
 * Copyright (c) Atmosph√®re-NX
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* NOTE: This file is auto-generated by pinmux_character_gen.py, do not edit manually. */
'''

def read_string(ofs):
    name = ''
    while True:
        n = ida_bytes.get_32bit(ofs) & 0xFF
        if n == 0:
            return name
        name += chr(n)
        ofs += 1

ENTRIES = []
max_name = 0
with open('pinmux_pad_characters.inc', 'w') as f:
    print >> f, COPYRIGHT_HEADER
    print >> f, 'constexpr inline const PinmuxPadCharacter PinmuxPadCharacters[] = {'
    for i in xrange(COUNT):
        entry = ADDRESS + 0x18 * i
        a, b, c, d = ida_bytes.get_32bit(entry), ida_bytes.get_32bit(entry + 4), ida_bytes.get_32bit(entry + 8) & 0xFF, ida_bytes.get_64bit(entry + 16)
        ENTRIES.append((a, b, c, read_string(d)))
    max_name = max([len(d) for (a,b,c,d) in ENTRIES])
    for (a, b, c, d) in ENTRIES:
        print >> f, ('    { 0x%%04X, 0x%%05X, 0x%%02X, %%-%ds },' % (max_name+2)) % (a, b, c, '"'+d+'"')
    print >> f, '};'
    print >> f, ''
    print >> f, 'constexpr inline size_t NumPinmuxPadCharacters = util::size(PinmuxPadCharacters);'

DRV_ENTRIES = []
max_drv_name = 0
with open('pinmux_drive_pad_characters.inc', 'w') as f:
    print >> f, COPYRIGHT_HEADER
    print >> f, 'constexpr inline const PinmuxDrivePadCharacter PinmuxDrivePadCharacters[] = {'
    for i in xrange(DRV_COUNT):
        entry = DRV_ADDRESS + 0x10 * i
        a, b, c = ida_bytes.get_32bit(entry), ida_bytes.get_32bit(entry + 4), ida_bytes.get_64bit(entry + 8)
        DRV_ENTRIES.append((a, b, read_string(c)))
    max_drv_name = max([len(c) for (a,b,c) in DRV_ENTRIES])
    for (a, b, c) in DRV_ENTRIES:
        print >> f, ('    { 0x%%04X, 0x%%08X, %%-%ds },' % (max_drv_name+2)) % (a, b, '"'+c+'"')
    print >> f, '};'
    print >> f, ''
    print >> f, 'constexpr inline size_t NumPinmuxDrivePadCharacters = util::size(PinmuxDrivePadCharacters);'

with open('pinmux_pad_index.hpp', 'w') as f:
    print >> f, COPYRIGHT_HEADER
    print >> f, '#pragma once'
    print >> f, ''
    print >> f, 'enum PinmuxPadIndex {'
    for i,(a, b, c, d) in enumerate(ENTRIES):
        print >> f, ('    PinmuxPadIndex_%%-%ds = %%3d,' % (max_name,)) % (d, i)
    print >> f, '};'
    print >> f, ''
    print >> f, 'enum PinmuxDrivePadIndex {'
    for i,(a, b, c) in enumerate(DRV_ENTRIES):
        print >> f, ('    PinmuxDrivePadIndex_%%-%ds = %%2d,' % (max_drv_name,)) % (c, i)
    print >> f, '};'
